{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to athigeo","text":"<p>A python package intro</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://athigeo.xyz</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Create interactive maps</li> <li>Visualize geospatial data</li> <li>Visualize raster data</li> </ul>"},{"location":"athigeo/","title":"athigeo module","text":"<p>Main module.</p>"},{"location":"athigeo/#athigeo.athigeo.Map","title":"<code> Map            (Map)         </code>","text":"<p>This is the map class that inherits from ipyleaflet.Map.</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>Map</code> <p>The ipyleaflet.Map class.</p> required Source code in <code>athigeo/athigeo.py</code> <pre><code>class Map(ipyleaflet.Map):\n\n    \"\"\"This is the map class that inherits from ipyleaflet.Map.\n\n    Args:\n        ipyleaflet (Map): The ipyleaflet.Map class.\n    \"\"\"\n    def __init__(self, center=[20, 0], zoom=2, **kwargs):\n        \"\"\"Initialize the map.\n\n        Args:\n            center (list, optional): Set the center of the map. Defaults to [20, 0].\n            zoom (int, optional): Set the zoom level of the map. Defaults to 2.\n        \"\"\"\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        self.add_control(ipyleaflet.LayersControl(position='topright'))\n\n        self.add_toolbar()\n\n    def add_tile_layer(self, url, name, **kwargs):\n        layer = ipyleaflet.TileLayer(url=url, name=name, **kwargs)\n        self.add_layer(layer)\n\n    def add_basemap(self, name):\n        \"\"\"Adds a basemap to the map.\n\n        Args:\n            name (str): The name of the basemap to add to the map. Check ipyleaflet website for possible names\n        \"\"\"\n        if isinstance(name, str):\n            url = eval(f\"basemaps.{name}\").build_url()\n            self.add_tile_layer(url, name)\n        else:\n            self.add(name)\n\n    def add_geojson(self, data, name = \"geojson\", **kwargs):\n        \"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (str | dict): The GeoJSON data as a string or a dictionary.\n            name (str, optional): The name of the layer. Defaults to \"geojson\".\n        \"\"\"\n        import json\n\n        if isinstance(data, str):\n                with open(data) as f:\n                    data = json.load(f)\n\n\n        if \"style\" not in kwargs:\n            kwargs[\"style\"] = {\"color\": \"blue\", \"weight\": 1, \"fillOpacity\": 0}\n\n        if \"hover_style\" not in kwargs:\n            kwargs[\"hover_style\"] = {\"fillColor\": \"red\", \"fillOpacity\": 0.3}\n\n        layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n        self.add(layer)\n\n    def add_shp(self, data, name = \"shp\", **kwargs):\n        \"\"\"Adds a shapefile to the current map.\n\n        Args:\n            data (str or dict): The path to the shapefile as a string or a dictionary representing a shapefile.\n            name (str, optional): Name of the layer. Defaults to \"shp\".\n        \"\"\"\n\n        import shapefile\n        import json\n        \"\"\"_summary_\n        \"\"\"\n        if isinstance(data, str):\n            with shapefile.Reader(data) as shp:\n                data = shp.__geo_interface__\n        self.add_geojson(data, name, **kwargs)\n\n    def add_image(self, url, bounds,  name = \"image\", **kwargs):\n        \"\"\"_summary_\n\n        Args:\n            url (_type_): _description_\n            bounds (_type_): _description_\n            name (str, optional): _description_. Defaults to \"image\".\n        \"\"\"\n\n        layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n        self.add(layer)\n\n    def add_raster(self, data, name=\"raster\",zoom_to_layer=True, **kwargs):\n        \"\"\"Adds a raster layer to the map.\n\n        Args:\n            data (str): The path to the raster file.\n            name (str, optional): The name of the layer. Defaults to \"raster\".\n        \"\"\"\n        try:\n            from localtileserver import TileClient, get_leaflet_tile_layer\n        except ImportError:\n            raise ImportError(\"Please install the localtileserver package.\")\n\n        client = TileClient(data)\n        layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n        self.add(layer)\n        if zoom_to_layer:\n            self.center = client.center()\n            self.zoom = client.default_zoom\n\n    def add_zoom_slider(self, description=\"Zoom level\", min=0, max=15, value=10, position='topright'):\n        \"\"\"_summary_\n\n        Args:\n            description (str, optional): _description_. Defaults to \"Zoom level\".\n            min (int, optional): _description_. Defaults to 0.\n            max (int, optional): _description_. Defaults to 15.\n            value (int, optional): _description_. Defaults to 10.\n            position (str, optional): _description_. Defaults to 'topright'.\n        \"\"\"\n        zoom_slider = widgets.IntSlider(\n            description=description, min=min, max=max, value=value                                      \n                )\n        control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position,)\n        self.add(control)\n        widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n\n    def add_basemap_gui(self, basemaps=None, position=\"topright\"):\n            \"\"\"Adds a basemap GUI to the map.\n\n            Args:\n                position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n            \"\"\"\n\n            basemap_selector = widgets.Dropdown(\n                options=[\n                    \"OpenStreetMap\",\n                    \"OpenTopoMap\",\n                    \"Esri.WorldImagery\",\n                    \"Esri.NatGeoWorldMap\",\n                ],\n                description=\"Basemap\",\n            )\n\n            def update_basemap(change):\n                self.add_basemap(change[\"new\"])\n\n            basemap_selector.observe(update_basemap, \"value\")\n\n            control = ipyleaflet.WidgetControl(widget=basemap_selector, position=position)\n            self.add(control)\n\n\n    def add_toolbar(self, position=\"topright\"):\n        \"\"\"_summary_\n\n        Args:\n            position (str, optional): _description_. Defaults to \"topright\".\n        \"\"\"        \n\n        padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n        toolbar_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Toolbar\",\n            icon=\"wrench\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n        toolbar = widgets.VBox([toolbar_button])\n\n        def close_click(change):\n            if change[\"new\"]:\n                toolbar_button.close()\n                close_button.close()\n                toolbar.close()\n\n\n        close_button.observe(close_click, \"value\")\n\n        rows = 2\n        cols = 2\n        grid = widgets.GridspecLayout(\n            rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")\n        )\n\n        icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n        for i in range(rows):\n            for j in range(cols):\n                grid[i, j] = widgets.Button(\n                    description=\"\",\n                    button_style=\"primary\",\n                    icon=icons[i * rows + j],\n                    layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n                )\n\n        def toolbar_click(change):\n            if change[\"new\"]:\n                toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n        toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n        self.add(toolbar_ctrl)\n\n        output = widgets.Output()\n        output_control = WidgetControl(widget=output, position=\"bottomright\")\n        self.add(output_control)\n\n        def toolbar_callback(change):\n            if change.icon == \"folder-open\":\n                with output:\n                    output.clear_output()\n                    print(f\"You can open a file\")\n            elif change.icon == \"map\":\n                with output:\n                    output.clear_output()\n                    print(f\"You can add a layer\")\n            else:\n                with output:\n                    output.clear_output()\n                    print(f\"Icon: {change.icon}\")\n\n        for tool in grid.children:\n            tool.on_click(toolbar_callback)\n\n        with output:\n            print(\"Toolbar is ready\")\n\n    def add_beans(self, name=\"beans\"):\n        \"\"\"Add beans to the map.\n\n        Args:\n            name (str, optional): The name of the beans. Defaults to \"beans\".\n        \"\"\"\n        beans = ipyleaflet.MarkerCluster(name=name)\n        self.add(beans)\n\n        for i in range(10):\n            marker = ipyleaflet.Marker(location=(i * 10, i * 10))\n            beans.markers = beans.markers + (marker,)    \n</code></pre>"},{"location":"athigeo/#athigeo.athigeo.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Initialize the map.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>Set the center of the map. Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>Set the zoom level of the map. Defaults to 2.</p> <code>2</code> Source code in <code>athigeo/athigeo.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=2, **kwargs):\n    \"\"\"Initialize the map.\n\n    Args:\n        center (list, optional): Set the center of the map. Defaults to [20, 0].\n        zoom (int, optional): Set the zoom level of the map. Defaults to 2.\n    \"\"\"\n    if \"scroll_wheel_zoom\" not in kwargs:\n        kwargs[\"scroll_wheel_zoom\"] = True\n\n    super().__init__(center=center, zoom=zoom, **kwargs)\n    self.add_control(ipyleaflet.LayersControl(position='topright'))\n\n    self.add_toolbar()\n</code></pre>"},{"location":"athigeo/#athigeo.athigeo.Map.add_basemap","title":"<code>add_basemap(self, name)</code>","text":"<p>Adds a basemap to the map.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the basemap to add to the map. Check ipyleaflet website for possible names</p> required Source code in <code>athigeo/athigeo.py</code> <pre><code>def add_basemap(self, name):\n    \"\"\"Adds a basemap to the map.\n\n    Args:\n        name (str): The name of the basemap to add to the map. Check ipyleaflet website for possible names\n    \"\"\"\n    if isinstance(name, str):\n        url = eval(f\"basemaps.{name}\").build_url()\n        self.add_tile_layer(url, name)\n    else:\n        self.add(name)\n</code></pre>"},{"location":"athigeo/#athigeo.athigeo.Map.add_basemap_gui","title":"<code>add_basemap_gui(self, basemaps=None, position='topright')</code>","text":"<p>Adds a basemap GUI to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the basemap GUI. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>athigeo/athigeo.py</code> <pre><code>def add_basemap_gui(self, basemaps=None, position=\"topright\"):\n        \"\"\"Adds a basemap GUI to the map.\n\n        Args:\n            position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n        \"\"\"\n\n        basemap_selector = widgets.Dropdown(\n            options=[\n                \"OpenStreetMap\",\n                \"OpenTopoMap\",\n                \"Esri.WorldImagery\",\n                \"Esri.NatGeoWorldMap\",\n            ],\n            description=\"Basemap\",\n        )\n\n        def update_basemap(change):\n            self.add_basemap(change[\"new\"])\n\n        basemap_selector.observe(update_basemap, \"value\")\n\n        control = ipyleaflet.WidgetControl(widget=basemap_selector, position=position)\n        self.add(control)\n</code></pre>"},{"location":"athigeo/#athigeo.athigeo.Map.add_beans","title":"<code>add_beans(self, name='beans')</code>","text":"<p>Add beans to the map.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the beans. Defaults to \"beans\".</p> <code>'beans'</code> Source code in <code>athigeo/athigeo.py</code> <pre><code>def add_beans(self, name=\"beans\"):\n    \"\"\"Add beans to the map.\n\n    Args:\n        name (str, optional): The name of the beans. Defaults to \"beans\".\n    \"\"\"\n    beans = ipyleaflet.MarkerCluster(name=name)\n    self.add(beans)\n\n    for i in range(10):\n        marker = ipyleaflet.Marker(location=(i * 10, i * 10))\n        beans.markers = beans.markers + (marker,)    \n</code></pre>"},{"location":"athigeo/#athigeo.athigeo.Map.add_geojson","title":"<code>add_geojson(self, data, name='geojson', **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str | dict</code> <p>The GeoJSON data as a string or a dictionary.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"geojson\".</p> <code>'geojson'</code> Source code in <code>athigeo/athigeo.py</code> <pre><code>def add_geojson(self, data, name = \"geojson\", **kwargs):\n    \"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (str | dict): The GeoJSON data as a string or a dictionary.\n        name (str, optional): The name of the layer. Defaults to \"geojson\".\n    \"\"\"\n    import json\n\n    if isinstance(data, str):\n            with open(data) as f:\n                data = json.load(f)\n\n\n    if \"style\" not in kwargs:\n        kwargs[\"style\"] = {\"color\": \"blue\", \"weight\": 1, \"fillOpacity\": 0}\n\n    if \"hover_style\" not in kwargs:\n        kwargs[\"hover_style\"] = {\"fillColor\": \"red\", \"fillOpacity\": 0.3}\n\n    layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"athigeo/#athigeo.athigeo.Map.add_image","title":"<code>add_image(self, url, bounds, name='image', **kwargs)</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>_type_</code> <p>description</p> required <code>bounds</code> <code>_type_</code> <p>description</p> required <code>name</code> <code>str</code> <p>description. Defaults to \"image\".</p> <code>'image'</code> Source code in <code>athigeo/athigeo.py</code> <pre><code>def add_image(self, url, bounds,  name = \"image\", **kwargs):\n    \"\"\"_summary_\n\n    Args:\n        url (_type_): _description_\n        bounds (_type_): _description_\n        name (str, optional): _description_. Defaults to \"image\".\n    \"\"\"\n\n    layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"athigeo/#athigeo.athigeo.Map.add_raster","title":"<code>add_raster(self, data, name='raster', zoom_to_layer=True, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str</code> <p>The path to the raster file.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"raster\".</p> <code>'raster'</code> Source code in <code>athigeo/athigeo.py</code> <pre><code>def add_raster(self, data, name=\"raster\",zoom_to_layer=True, **kwargs):\n    \"\"\"Adds a raster layer to the map.\n\n    Args:\n        data (str): The path to the raster file.\n        name (str, optional): The name of the layer. Defaults to \"raster\".\n    \"\"\"\n    try:\n        from localtileserver import TileClient, get_leaflet_tile_layer\n    except ImportError:\n        raise ImportError(\"Please install the localtileserver package.\")\n\n    client = TileClient(data)\n    layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n    self.add(layer)\n    if zoom_to_layer:\n        self.center = client.center()\n        self.zoom = client.default_zoom\n</code></pre>"},{"location":"athigeo/#athigeo.athigeo.Map.add_shp","title":"<code>add_shp(self, data, name='shp', **kwargs)</code>","text":"<p>Adds a shapefile to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The path to the shapefile as a string or a dictionary representing a shapefile.</p> required <code>name</code> <code>str</code> <p>Name of the layer. Defaults to \"shp\".</p> <code>'shp'</code> Source code in <code>athigeo/athigeo.py</code> <pre><code>def add_shp(self, data, name = \"shp\", **kwargs):\n    \"\"\"Adds a shapefile to the current map.\n\n    Args:\n        data (str or dict): The path to the shapefile as a string or a dictionary representing a shapefile.\n        name (str, optional): Name of the layer. Defaults to \"shp\".\n    \"\"\"\n\n    import shapefile\n    import json\n    \"\"\"_summary_\n    \"\"\"\n    if isinstance(data, str):\n        with shapefile.Reader(data) as shp:\n            data = shp.__geo_interface__\n    self.add_geojson(data, name, **kwargs)\n</code></pre>"},{"location":"athigeo/#athigeo.athigeo.Map.add_toolbar","title":"<code>add_toolbar(self, position='topright')</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>description. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>athigeo/athigeo.py</code> <pre><code>def add_toolbar(self, position=\"topright\"):\n    \"\"\"_summary_\n\n    Args:\n        position (str, optional): _description_. Defaults to \"topright\".\n    \"\"\"        \n\n    padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n    toolbar_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Toolbar\",\n        icon=\"wrench\",\n        layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n    )\n\n    close_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Close the tool\",\n        icon=\"times\",\n        button_style=\"primary\",\n        layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n    )\n    toolbar = widgets.VBox([toolbar_button])\n\n    def close_click(change):\n        if change[\"new\"]:\n            toolbar_button.close()\n            close_button.close()\n            toolbar.close()\n\n\n    close_button.observe(close_click, \"value\")\n\n    rows = 2\n    cols = 2\n    grid = widgets.GridspecLayout(\n        rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")\n    )\n\n    icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n    for i in range(rows):\n        for j in range(cols):\n            grid[i, j] = widgets.Button(\n                description=\"\",\n                button_style=\"primary\",\n                icon=icons[i * rows + j],\n                layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n            )\n\n    def toolbar_click(change):\n        if change[\"new\"]:\n            toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n        else:\n            toolbar.children = [toolbar_button]\n\n    toolbar_button.observe(toolbar_click, \"value\")\n    toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n    self.add(toolbar_ctrl)\n\n    output = widgets.Output()\n    output_control = WidgetControl(widget=output, position=\"bottomright\")\n    self.add(output_control)\n\n    def toolbar_callback(change):\n        if change.icon == \"folder-open\":\n            with output:\n                output.clear_output()\n                print(f\"You can open a file\")\n        elif change.icon == \"map\":\n            with output:\n                output.clear_output()\n                print(f\"You can add a layer\")\n        else:\n            with output:\n                output.clear_output()\n                print(f\"Icon: {change.icon}\")\n\n    for tool in grid.children:\n        tool.on_click(toolbar_callback)\n\n    with output:\n        print(\"Toolbar is ready\")\n</code></pre>"},{"location":"athigeo/#athigeo.athigeo.Map.add_zoom_slider","title":"<code>add_zoom_slider(self, description='Zoom level', min=0, max=15, value=10, position='topright')</code>","text":"<p>summary</p> <p>Parameters:</p> Name Type Description Default <code>description</code> <code>str</code> <p>description. Defaults to \"Zoom level\".</p> <code>'Zoom level'</code> <code>min</code> <code>int</code> <p>description. Defaults to 0.</p> <code>0</code> <code>max</code> <code>int</code> <p>description. Defaults to 15.</p> <code>15</code> <code>value</code> <code>int</code> <p>description. Defaults to 10.</p> <code>10</code> <code>position</code> <code>str</code> <p>description. Defaults to 'topright'.</p> <code>'topright'</code> Source code in <code>athigeo/athigeo.py</code> <pre><code>def add_zoom_slider(self, description=\"Zoom level\", min=0, max=15, value=10, position='topright'):\n    \"\"\"_summary_\n\n    Args:\n        description (str, optional): _description_. Defaults to \"Zoom level\".\n        min (int, optional): _description_. Defaults to 0.\n        max (int, optional): _description_. Defaults to 15.\n        value (int, optional): _description_. Defaults to 10.\n        position (str, optional): _description_. Defaults to 'topright'.\n    \"\"\"\n    zoom_slider = widgets.IntSlider(\n        description=description, min=min, max=max, value=value                                      \n            )\n    control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position,)\n    self.add(control)\n    widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#athigeo.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>athigeo/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n\n\n    def hello(name):\n        \"\"\"Prints \"Hello {name}!\" to the console.\n\n        Args:\n        name (str): The name to print.\n        \"\"\"\n        print(f\"Hello{name}!\") \n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/Dmutai/athigeo/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>athigeo could always use more documentation, whether as part of the official athigeo docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/Dmutai/athigeo/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up athigeo for local development.</p> <ol> <li> <p>Fork the athigeo repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/athigeo.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv athigeo\n$ cd athigeo/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 athigeo tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/Dmutai/athigeo/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install athigeo, run this command in your terminal:</p> <pre><code>pip install athigeo\n</code></pre> <p>This is the preferred method to install athigeo, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install athigeo from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/Dmutai/athigeo\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use athigeo in a project:</p> <pre><code>import athigeo\n</code></pre>"},{"location":"utils/","title":"utils module","text":"<p>This is the utils module that contains utility functions for the athigeo package.</p>"},{"location":"utils/#athigeo.utils.csv_to_df","title":"<code>csv_to_df(csv_file)</code>","text":"<p>Converts a CSV file to a pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>csv_file</code> <code>str</code> <p>The path to the CSV file.</p> required <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>The pandas DataFrame.</p> Source code in <code>athigeo/utils.py</code> <pre><code>def csv_to_df(csv_file):\n    \"\"\"Converts a CSV file to a pandas DataFrame.\n\n    Args:\n        csv_file (str): The path to the CSV file.\n\n    Returns:\n        pandas.DataFrame: The pandas DataFrame.\n    \"\"\"\n    import pandas as pd\n\n    return pd.read_csv(csv_file)\n</code></pre>"},{"location":"examples/csv/","title":"Csv","text":"In\u00a0[1]: Copied! <pre>import athigeo\n</pre> import athigeo In\u00a0[2]: Copied! <pre>from athigeo import utils\n</pre> from athigeo import utils In\u00a0[3]: Copied! <pre>csv = \"https://github.com/opengeos/datasets/releases/download/us/us_states.csv\"\ndf = utils.csv_to_df(csv)\ndf\n</pre> csv = \"https://github.com/opengeos/datasets/releases/download/us/us_states.csv\" df = utils.csv_to_df(csv) df Out[3]: id name 0 AL Alabama 1 AK Alaska 2 AZ Arizona 3 AR Arkansas 4 CA California 5 CO Colorado 6 CT Connecticut 7 DE Delaware 8 FL Florida 9 GA Georgia 10 HI Hawaii 11 ID Idaho 12 IL Illinois 13 IN Indiana 14 IA Iowa 15 KS Kansas 16 KY Kentucky 17 LA Louisiana 18 ME Maine 19 MD Maryland 20 MA Massachusetts 21 MI Michigan 22 MN Minnesota 23 MS Mississippi 24 MO Missouri 25 MT Montana 26 NE Nebraska 27 NV Nevada 28 NH New Hampshire 29 NJ New Jersey 30 NM New Mexico 31 NY New York 32 NC North Carolina 33 ND North Dakota 34 OH Ohio 35 OK Oklahoma 36 OR Oregon 37 PA Pennsylvania 38 RI Rhode Island 39 SC South Carolina 40 SD South Dakota 41 TN Tennessee 42 TX Texas 43 UT Utah 44 VT Vermont 45 VA Virginia 46 WA Washington 47 WV West Virginia 48 WI Wisconsin 49 WY Wyoming 50 DC District of Columbia In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[\u00a0]: Copied! <pre>import folium\n\nm = folium.Map(location=(45.5236, -122.6750))\n</pre> import folium  m = folium.Map(location=(45.5236, -122.6750)) In\u00a0[\u00a0]: Copied! <pre>m\n</pre> m In\u00a0[\u00a0]: Copied! <pre>import athigeo\n</pre> import athigeo In\u00a0[\u00a0]: Copied! <pre>import athigeo.foliumap as athigeo\n</pre> import athigeo.foliumap as athigeo In\u00a0[\u00a0]: Copied! <pre>m = athigeo.Map(center=[30,-100], zoom=4)\nurl = \"https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif\"\nm.add_raster(url, colormap=\"terrain\", name=\"SRTM90\", opacity=0.5)\nm\n</pre> m = athigeo.Map(center=[30,-100], zoom=4) url = \"https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif\" m.add_raster(url, colormap=\"terrain\", name=\"SRTM90\", opacity=0.5) m In\u00a0[\u00a0]: Copied! <pre>m.save(\"raster.html\")\n</pre> m.save(\"raster.html\") In\u00a0[\u00a0]: Copied! <pre>from localtileserver import TileClient, get_folium_tile_layer, examples\nfrom folium import Map\n\n# Create a TileClient from a raster file\n# client = TileClient('path/to/geo.tif')\nclient = examples.get_san_francisco()  # use example data\n\n# Create ipyleaflet TileLayer from that server\nt = get_folium_tile_layer(client)\n# Create ipyleaflet map, add tile layer, and display\nm = Map(location=client.center(), zoom_start=client.default_zoom)\nt.add_to(m)\nm\n</pre> from localtileserver import TileClient, get_folium_tile_layer, examples from folium import Map  # Create a TileClient from a raster file # client = TileClient('path/to/geo.tif') client = examples.get_san_francisco()  # use example data  # Create ipyleaflet TileLayer from that server t = get_folium_tile_layer(client) # Create ipyleaflet map, add tile layer, and display m = Map(location=client.center(), zoom_start=client.default_zoom) t.add_to(m) m"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"},{"location":"examples/ipywidgets/","title":"Ipywidgets","text":"<p>Introduction to ipywidgets</p> <p>https://ipywidgets.readthedocs.io</p> In\u00a0[1]: Copied! <pre># !pip install athigeo\n</pre> # !pip install athigeo In\u00a0[2]: Copied! <pre>import athigeo\n</pre> import athigeo In\u00a0[3]: Copied! <pre>m = athigeo.Map()\nm.add_basemap(\"OpenTopoMap\")\nm.add_zoom_slider(position=\"bottomleft\")\nm\n</pre> m = athigeo.Map() m.add_basemap(\"OpenTopoMap\") m.add_zoom_slider(position=\"bottomleft\") m Out[3]: In\u00a0[4]: Copied! <pre>url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\n# m.add_raster(url, name='Raster', fit_bounds=True)\n</pre> url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" # m.add_raster(url, name='Raster', fit_bounds=True) In\u00a0[5]: Copied! <pre>m.layers\n</pre> m.layers Out[5]: <pre>(TileLayer(attribution='&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors', base=True, max_zoom=19, min_zoom=1, name='OpenStreetMap.Mapnik', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'),\n TileLayer(name='OpenTopoMap', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://a.tile.opentopomap.org/{z}/{x}/{y}.png'))</pre> In\u00a0[6]: Copied! <pre>raster_layer = m.layers[-1]\nraster_layer.interact(opacity=(0, 1, 0.1))\n</pre> raster_layer = m.layers[-1] raster_layer.interact(opacity=(0, 1, 0.1)) Out[6]: In\u00a0[7]: Copied! <pre>from ipyleaflet import Map, basemaps, WidgetControl\nfrom ipywidgets import IntSlider, ColorPicker, jslink\n\nm = Map(center=(46.01, 6.16), zoom=12, basemap=basemaps.OpenTopoMap)\nzoom_slider = IntSlider(description='Zoom level:', min=0, max=15, value=7)\njslink((zoom_slider, 'value'), (m, 'zoom'))\nwidget_control1 = WidgetControl(widget=zoom_slider, position='topright')\nm.add(widget_control1)\n\ncolor_picker = ColorPicker(description='Pick a color:')\nwidget_control2 = WidgetControl(widget=color_picker, position='bottomright')\nm.add(widget_control2)\nm\n</pre> from ipyleaflet import Map, basemaps, WidgetControl from ipywidgets import IntSlider, ColorPicker, jslink  m = Map(center=(46.01, 6.16), zoom=12, basemap=basemaps.OpenTopoMap) zoom_slider = IntSlider(description='Zoom level:', min=0, max=15, value=7) jslink((zoom_slider, 'value'), (m, 'zoom')) widget_control1 = WidgetControl(widget=zoom_slider, position='topright') m.add(widget_control1)  color_picker = ColorPicker(description='Pick a color:') widget_control2 = WidgetControl(widget=color_picker, position='bottomright') m.add(widget_control2) m Out[7]: In\u00a0[8]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets In\u00a0[9]: Copied! <pre>int_slider = widgets.IntSlider(\n    value=2000, min=1984, max=2023, step=1, description=\"Year:\"\n)\nint_slider\n</pre> int_slider = widgets.IntSlider(     value=2000, min=1984, max=2023, step=1, description=\"Year:\" ) int_slider Out[9]: In\u00a0[10]: Copied! <pre>int_slider\n</pre> int_slider Out[10]: In\u00a0[11]: Copied! <pre>int_slider.value\n</pre> int_slider.value Out[11]: <pre>2000</pre> In\u00a0[12]: Copied! <pre>int_slider.value = 2019\n</pre> int_slider.value = 2019 In\u00a0[13]: Copied! <pre>float_slider = widgets.FloatSlider(\n    value=0, min=-1, max=1, step=0.05, description=\"Threshold:\"\n)\nfloat_slider\n</pre> float_slider = widgets.FloatSlider(     value=0, min=-1, max=1, step=0.05, description=\"Threshold:\" ) float_slider Out[13]: In\u00a0[14]: Copied! <pre>float_slider.value\n</pre> float_slider.value Out[14]: <pre>0.0</pre> In\u00a0[15]: Copied! <pre>int_progress = widgets.IntProgress(\n    value=10,\n    min=0,\n    max=10,\n    step=1,\n    description=\"Loading:\",\n    bar_style=\"\",  # 'success', 'info', 'warning', 'danger' or ''\n    orientation=\"horizontal\",\n)\nint_progress\n</pre> int_progress = widgets.IntProgress(     value=10,     min=0,     max=10,     step=1,     description=\"Loading:\",     bar_style=\"\",  # 'success', 'info', 'warning', 'danger' or ''     orientation=\"horizontal\", ) int_progress Out[15]: In\u00a0[16]: Copied! <pre>int_progress.value = 2\n</pre> int_progress.value = 2 In\u00a0[17]: Copied! <pre>int_text = widgets.IntText(\n    value=7,\n    description=\"Any:\",\n)\nint_text\n</pre> int_text = widgets.IntText(     value=7,     description=\"Any:\", ) int_text Out[17]: In\u00a0[18]: Copied! <pre>float_text = widgets.FloatText(\n    value=7.5,\n    step=2,\n    description=\"Any:\",\n)\nfloat_text\n</pre> float_text = widgets.FloatText(     value=7.5,     step=2,     description=\"Any:\", ) float_text Out[18]: In\u00a0[19]: Copied! <pre>toggle_button = widgets.ToggleButton(\n    value=False,\n    description=\"Click me\",\n    disabled=False,\n    button_style=\"warning\",  # 'success', 'info', 'warning', 'danger' or ''\n    tooltip=\"Description\",\n    icon=\"map\",  # (FontAwesome names without the `fa-` prefix)\n)\ntoggle_button\n</pre> toggle_button = widgets.ToggleButton(     value=False,     description=\"Click me\",     disabled=False,     button_style=\"warning\",  # 'success', 'info', 'warning', 'danger' or ''     tooltip=\"Description\",     icon=\"map\",  # (FontAwesome names without the `fa-` prefix) ) toggle_button Out[19]: In\u00a0[20]: Copied! <pre>toggle_button.value\n</pre> toggle_button.value Out[20]: <pre>False</pre> In\u00a0[21]: Copied! <pre>checkbox = widgets.Checkbox(\n    value=False, description=\"Check me\", disabled=False, indent=False\n)\ncheckbox\n</pre> checkbox = widgets.Checkbox(     value=False, description=\"Check me\", disabled=False, indent=False ) checkbox Out[21]: In\u00a0[22]: Copied! <pre>checkbox.value\n</pre> checkbox.value Out[22]: <pre>False</pre> In\u00a0[23]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=[\"USA\", \"Canada\", \"Mexico\"], value=\"Canada\", description=\"Country:\"\n)\ndropdown\n</pre> dropdown = widgets.Dropdown(     options=[\"USA\", \"Canada\", \"Mexico\"], value=\"Canada\", description=\"Country:\" ) dropdown Out[23]: In\u00a0[24]: Copied! <pre>dropdown.value\n</pre> dropdown.value Out[24]: <pre>'Canada'</pre> In\u00a0[25]: Copied! <pre>radio_buttons = widgets.RadioButtons(\n    options=[\"USA\", \"Canada\", \"Mexico\"], value=\"Canada\", description=\"Country:\"\n)\nradio_buttons\n</pre> radio_buttons = widgets.RadioButtons(     options=[\"USA\", \"Canada\", \"Mexico\"], value=\"Canada\", description=\"Country:\" ) radio_buttons Out[25]: In\u00a0[26]: Copied! <pre>radio_buttons.value\n</pre> radio_buttons.value Out[26]: <pre>'Canada'</pre> In\u00a0[27]: Copied! <pre>text = widgets.Text(\n    value=\"\",\n    placeholder=\"Enter a country name\",\n    description=\"Country:\",\n    disabled=False,\n)\ntext\n</pre> text = widgets.Text(     value=\"\",     placeholder=\"Enter a country name\",     description=\"Country:\",     disabled=False, ) text Out[27]: In\u00a0[28]: Copied! <pre>text.value\n</pre> text.value Out[28]: <pre>''</pre> In\u00a0[29]: Copied! <pre>widgets.Textarea(\n    value=\"Hello World\",\n    placeholder=\"Type something\",\n    description=\"String:\",\n    disabled=False,\n)\n</pre> widgets.Textarea(     value=\"Hello World\",     placeholder=\"Type something\",     description=\"String:\",     disabled=False, ) Out[29]: In\u00a0[30]: Copied! <pre>widgets.HTML(\n    value=\"Hello &lt;b&gt;World&lt;/b&gt;\",\n    placeholder=\"Some HTML\",\n    description=\"Some HTML\",\n)\n</pre> widgets.HTML(     value=\"Hello World\",     placeholder=\"Some HTML\",     description=\"Some HTML\", ) Out[30]: In\u00a0[31]: Copied! <pre>widgets.HTML(\n    value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"200\" height=\"200\"&gt;'\n)\n</pre> widgets.HTML(     value='' ) Out[31]: In\u00a0[32]: Copied! <pre>button = widgets.Button(\n    description=\"\",\n    button_style=\"primary\",  # 'success', 'info', 'warning', 'danger' or ''\n    tooltip=\"Click me\",\n    icon=\"wrench\",  # (FontAwesome names without the `fa-` prefix)\n)\nbutton.layout.width = \"35px\"\nbutton\n</pre> button = widgets.Button(     description=\"\",     button_style=\"primary\",  # 'success', 'info', 'warning', 'danger' or ''     tooltip=\"Click me\",     icon=\"wrench\",  # (FontAwesome names without the `fa-` prefix) ) button.layout.width = \"35px\" button Out[32]: In\u00a0[33]: Copied! <pre>date_picker = widgets.DatePicker(description=\"Pick a Date\", disabled=False)\ndate_picker\n</pre> date_picker = widgets.DatePicker(description=\"Pick a Date\", disabled=False) date_picker Out[33]: In\u00a0[34]: Copied! <pre>date_picker.value\n</pre> date_picker.value In\u00a0[35]: Copied! <pre>color_picker = widgets.ColorPicker(\n    concise=False, description=\"Pick a color\", value=\"blue\", disabled=False\n)\ncolor_picker\n</pre> color_picker = widgets.ColorPicker(     concise=False, description=\"Pick a color\", value=\"blue\", disabled=False ) color_picker Out[35]: In\u00a0[36]: Copied! <pre>color_picker.value\n</pre> color_picker.value Out[36]: <pre>'blue'</pre> In\u00a0[37]: Copied! <pre>out = widgets.Output(layout={\"border\": \"1px solid black\"})\nout\n</pre> out = widgets.Output(layout={\"border\": \"1px solid black\"}) out Out[37]: In\u00a0[38]: Copied! <pre>with out:\n    out.clear_output()\n    for i in range(10):\n        print(i, \"Hello world!\")\n\n    # display(widgets.IntSlider())\n    # display(widgets.Button(description=\"Hello\"))\n</pre> with out:     out.clear_output()     for i in range(10):         print(i, \"Hello world!\")      # display(widgets.IntSlider())     # display(widgets.Button(description=\"Hello\")) In\u00a0[39]: Copied! <pre>from IPython.display import YouTubeVideo\n\nout.clear_output()\nwith out:\n    display(YouTubeVideo(\"mA21Us_3m28\"))\nout\n</pre> from IPython.display import YouTubeVideo  out.clear_output() with out:     display(YouTubeVideo(\"mA21Us_3m28\")) out Out[39]: In\u00a0[40]: Copied! <pre>out.clear_output()\nwith out:\n    display(widgets.IntSlider())\nout\n</pre> out.clear_output() with out:     display(widgets.IntSlider()) out Out[40]: In\u00a0[41]: Copied! <pre>import ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[42]: Copied! <pre>import athigeo\n</pre> import athigeo In\u00a0[43]: Copied! <pre>m = athigeo.Map()\nm\n</pre> m = athigeo.Map() m Out[43]: In\u00a0[44]: Copied! <pre>output_widget = widgets.Output(layout={\"border\": \"1px solid black\"})\noutput_control = WidgetControl(widget=output_widget, position=\"bottomright\")\nm.add_control(output_control)\n</pre> output_widget = widgets.Output(layout={\"border\": \"1px solid black\"}) output_control = WidgetControl(widget=output_widget, position=\"bottomright\") m.add_control(output_control) In\u00a0[45]: Copied! <pre>with output_widget:\n    print(\"Nice map!\")\n</pre> with output_widget:     print(\"Nice map!\") In\u00a0[46]: Copied! <pre>output_widget.clear_output()\nlogo = widgets.HTML(\n    value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"100\"&gt;'\n)\nwith output_widget:\n    display(logo)\n</pre> output_widget.clear_output() logo = widgets.HTML(     value='' ) with output_widget:     display(logo) In\u00a0[47]: Copied! <pre>def handle_interaction(**kwargs):\n    latlon = kwargs.get(\"coordinates\")\n    # latlon = [round(x, 2) for x in latlon]\n    if kwargs.get(\"type\") == \"click\":\n        with output_widget:\n            output_widget.clear_output()\n            print(\"You clicked at: {}\".format(latlon))\n\n\nm.on_interaction(handle_interaction)\n</pre> def handle_interaction(**kwargs):     latlon = kwargs.get(\"coordinates\")     # latlon = [round(x, 2) for x in latlon]     if kwargs.get(\"type\") == \"click\":         with output_widget:             output_widget.clear_output()             print(\"You clicked at: {}\".format(latlon))   m.on_interaction(handle_interaction) In\u00a0[48]: Copied! <pre>items = [widgets.Button(description=str(i + 1)) for i in range(4)]\nwidgets.HBox(items)\n</pre> items = [widgets.Button(description=str(i + 1)) for i in range(4)] widgets.HBox(items) Out[48]: In\u00a0[49]: Copied! <pre>items = [widgets.Button(description=str(i + 1)) for i in range(4)]\nwidgets.VBox(items)\n</pre> items = [widgets.Button(description=str(i + 1)) for i in range(4)] widgets.VBox(items) Out[49]: In\u00a0[50]: Copied! <pre>btn = widgets.Button(icon=\"times\", button_style=\"primary\")\nbtn.layout.width = \"35px\"\nbtn\n</pre> btn = widgets.Button(icon=\"times\", button_style=\"primary\") btn.layout.width = \"35px\" btn Out[50]: In\u00a0[51]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=[\"OpenStreetMap\", \"OpenTopoMap\", \"Esri.WorldImagery\"],\n    value=\"OpenStreetMap\",\n)\ndropdown.layout.width = \"150px\"\ndropdown\n</pre> dropdown = widgets.Dropdown(     options=[\"OpenStreetMap\", \"OpenTopoMap\", \"Esri.WorldImagery\"],     value=\"OpenStreetMap\", ) dropdown.layout.width = \"150px\" dropdown Out[51]: In\u00a0[52]: Copied! <pre>box = widgets.HBox([dropdown, btn])\nbox\n</pre> box = widgets.HBox([dropdown, btn]) box Out[52]: In\u00a0[53]: Copied! <pre>m = athigeo.Map()\nm\n</pre> m = athigeo.Map() m Out[53]: In\u00a0[54]: Copied! <pre>m.controls = m.controls[:-1]\n</pre> m.controls = m.controls[:-1]"},{"location":"examples/ipywidgets/#import-libraries","title":"Import libraries\u00b6","text":""},{"location":"examples/ipywidgets/#create-an-interactive-map","title":"Create an interactive map\u00b6","text":""},{"location":"examples/ipywidgets/#change-layer-opacity","title":"Change layer opacity\u00b6","text":""},{"location":"examples/ipywidgets/#widget-list","title":"Widget list\u00b6","text":"<p>Widget list: https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20List.html</p> <p>Icons: https://fontawesome.com/v4.7.0/icons</p>"},{"location":"examples/ipywidgets/#numeric-widgets","title":"Numeric widgets\u00b6","text":""},{"location":"examples/ipywidgets/#intslider","title":"IntSlider\u00b6","text":""},{"location":"examples/ipywidgets/#floatslider","title":"FloatSlider\u00b6","text":""},{"location":"examples/ipywidgets/#intprogress","title":"IntProgress\u00b6","text":""},{"location":"examples/ipywidgets/#boolean-widgets","title":"Boolean widgets\u00b6","text":""},{"location":"examples/ipywidgets/#togglebutton","title":"ToggleButton\u00b6","text":""},{"location":"examples/ipywidgets/#checkbox","title":"Checkbox\u00b6","text":""},{"location":"examples/ipywidgets/#selection-widgets","title":"Selection widgets\u00b6","text":""},{"location":"examples/ipywidgets/#dropdown","title":"Dropdown\u00b6","text":""},{"location":"examples/ipywidgets/#radiobuttons","title":"RadioButtons\u00b6","text":""},{"location":"examples/ipywidgets/#string-widgets","title":"String widgets\u00b6","text":""},{"location":"examples/ipywidgets/#text","title":"Text\u00b6","text":""},{"location":"examples/ipywidgets/#textarea","title":"Textarea\u00b6","text":""},{"location":"examples/ipywidgets/#html","title":"HTML\u00b6","text":""},{"location":"examples/ipywidgets/#button","title":"Button\u00b6","text":""},{"location":"examples/ipywidgets/#date-picker","title":"Date picker\u00b6","text":""},{"location":"examples/ipywidgets/#color-picker","title":"Color picker\u00b6","text":""},{"location":"examples/ipywidgets/#output-widget","title":"Output widget\u00b6","text":""},{"location":"examples/ipywidgets/#add-a-widget-to-the-map","title":"Add a widget to the map\u00b6","text":""},{"location":"examples/raster/","title":"Raster","text":"In\u00a0[\u00a0]: Copied! <pre>from ipyleaflet import Map, ImageOverlay\n\nm = Map(center=(25, -115), zoom=4)\n\nimage = ImageOverlay(\n    url=\"https://i.imgur.com/06Q1fSz.png\",\n    # url='../06Q1fSz.png',\n    bounds=((13, -130), (32, -100)),\n)\n\nm.add(image)\nm\n</pre> from ipyleaflet import Map, ImageOverlay  m = Map(center=(25, -115), zoom=4)  image = ImageOverlay(     url=\"https://i.imgur.com/06Q1fSz.png\",     # url='../06Q1fSz.png',     bounds=((13, -130), (32, -100)), )  m.add(image) m In\u00a0[\u00a0]: Copied! <pre>import geohey\n</pre> import geohey In\u00a0[\u00a0]: Copied! <pre>m = geohey.Map()\n\nurl = \"https://i.gifer.com/4j.gif\"\n# url='../06Q1fSz.png',\nbounds = ((13, 100), (45, 130))\nm.add_image(url, bounds)\nm.add_layers_control()\n# m.scroll_wheel_zoom = True\nm\n</pre> m = geohey.Map()  url = \"https://i.gifer.com/4j.gif\" # url='../06Q1fSz.png', bounds = ((13, 100), (45, 130)) m.add_image(url, bounds) m.add_layers_control() # m.scroll_wheel_zoom = True m In\u00a0[\u00a0]: Copied! <pre>import rasterio\nimport pyproj\n\nprint(f\"Rasterio version: {rasterio.__version__}\")\nprint(f\"GDAL version: {rasterio.__gdal_version__}\")\nprint(f\"Pyproj version: {pyproj.__version__}\")\n</pre> import rasterio import pyproj  print(f\"Rasterio version: {rasterio.__version__}\") print(f\"GDAL version: {rasterio.__gdal_version__}\") print(f\"Pyproj version: {pyproj.__version__}\")  In\u00a0[\u00a0]: Copied! <pre>_pyproj_global_context_initialize()\n</pre>   _pyproj_global_context_initialize() In\u00a0[\u00a0]: Copied! <pre>import os\n\nos.environ['PROJ_LIB'] = os.path.join(os.getenv('CONDA_PREFIX'), 'share', 'proj', 'pyproj')\n</pre> import os  os.environ['PROJ_LIB'] = os.path.join(os.getenv('CONDA_PREFIX'), 'share', 'proj', 'pyproj')  In\u00a0[\u00a0]: Copied! <pre>import pyproj\n</pre> import pyproj In\u00a0[\u00a0]: Copied! <pre>from pyproj import CRS\nimport warnings\n\n# Suppress specific warnings related to pyproj database path issues\nwarnings.filterwarnings(\"ignore\", message=\"pyproj unable to set database path\")\n\ntry:\n    crs = CRS.from_epsg(4326)  # WGS 84\n    print(crs)\nexcept Exception as e:\n    print(f\"Pyproj Error: {e}\")\n</pre> from pyproj import CRS import warnings  # Suppress specific warnings related to pyproj database path issues warnings.filterwarnings(\"ignore\", message=\"pyproj unable to set database path\")  try:     crs = CRS.from_epsg(4326)  # WGS 84     print(crs) except Exception as e:     print(f\"Pyproj Error: {e}\")  In\u00a0[\u00a0]: Copied! <pre>from localtileserver import TileClient, get_leaflet_tile_layer, examples\nfrom ipyleaflet import Map\n\n# Create a TileClient from a raster file\n# client = TileClient('path/to/geo.tif')\nclient = examples.get_san_francisco()  # use example data\n\n# Create ipyleaflet TileLayer from that server\nt = get_leaflet_tile_layer(client)\n# Create ipyleaflet map, add tile layer, and display\nm = Map(center=client.center(), zoom=client.default_zoom)\nm.add(t)\nm\n</pre> from localtileserver import TileClient, get_leaflet_tile_layer, examples from ipyleaflet import Map  # Create a TileClient from a raster file # client = TileClient('path/to/geo.tif') client = examples.get_san_francisco()  # use example data  # Create ipyleaflet TileLayer from that server t = get_leaflet_tile_layer(client) # Create ipyleaflet map, add tile layer, and display m = Map(center=client.center(), zoom=client.default_zoom) m.add(t) m In\u00a0[\u00a0]: Copied! <pre>m.layers\n</pre> m.layers In\u00a0[\u00a0]: Copied! <pre>from localtileserver import TileClient, get_leaflet_tile_layer, examples\nfrom ipyleaflet import Map\n\n# Create a TileClient from a raster file\n# client = TileClient('srtm90.tif')\nclient = TileClient(\n    \"https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif\"\n)\n# client = TileClient('https://opendata.digitalglobe.com/events/california-fire-2020/pre-event/2018-02-16/pine-gulch-fire20/1030010076004E00.tif')\n# client = examples.get_san_francisco()  # use example data\n\n# Create ipyleaflet TileLayer from that server\nt = get_leaflet_tile_layer(client, colormap=\"terrain\")\n# Create ipyleaflet map, add tile layer, and display\nm = Map()\nm.add(t)\nm.center = client.center()\nm.zoom = client.default_zoom\nm\n</pre> from localtileserver import TileClient, get_leaflet_tile_layer, examples from ipyleaflet import Map  # Create a TileClient from a raster file # client = TileClient('srtm90.tif') client = TileClient(     \"https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif\" ) # client = TileClient('https://opendata.digitalglobe.com/events/california-fire-2020/pre-event/2018-02-16/pine-gulch-fire20/1030010076004E00.tif') # client = examples.get_san_francisco()  # use example data  # Create ipyleaflet TileLayer from that server t = get_leaflet_tile_layer(client, colormap=\"terrain\") # Create ipyleaflet map, add tile layer, and display m = Map() m.add(t) m.center = client.center() m.zoom = client.default_zoom m In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[7]: Copied! <pre>import athigeo\n</pre> import athigeo <pre>\nThe Kernel crashed while executing code in the current cell or a previous cell. \n\nPlease review the code in the cell(s) to identify a possible cause of the failure. \n\nClick &lt;a href='https://aka.ms/vscodeJupyterKernelCrash'&gt;here&lt;/a&gt; for more info. \n\nView Jupyter &lt;a href='command:jupyter.viewOutput'&gt;log&lt;/a&gt; for further details.</pre> In\u00a0[3]: Copied! <pre>m = athigeo.Map(add_layer_control=False)\ndata = \"https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif\"\nm.add_raster(data, colormap =\"terrain\", name=\"DEM\")\nm\n</pre> m = athigeo.Map(add_layer_control=False) data = \"https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif\" m.add_raster(data, colormap =\"terrain\", name=\"DEM\") m Out[3]: <pre>Map(center=[37.630466999999996, -119.03021849999999], controls=(ZoomControl(options=['position', 'zoom_in_text\u2026</pre> In\u00a0[6]: Copied! <pre>m.layers[1].interact(opacity=(0.0, 1.0, 0.1))\n</pre> m.layers[1].interact(opacity=(0.0, 1.0, 0.1)) Out[6]: <pre>Box(children=(FloatSlider(value=0.8, description='opacity', max=1.0),))</pre> In\u00a0[\u00a0]: Copied! <pre>m.layers\n</pre> m.layers In\u00a0[\u00a0]: Copied! <pre>client.center()\n</pre> client.center() In\u00a0[\u00a0]: Copied! <pre>client.default_zoom\n</pre> client.default_zoom In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>m.layers\n</pre> m.layers In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/toolbar/","title":"Toolbar","text":"In\u00a0[1]: Copied! <pre>import athigeo\nimport ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import athigeo import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[2]: Copied! <pre>import athigeo\n</pre> import athigeo In\u00a0[3]: Copied! <pre>m = athigeo.Map()\n# m.add_toolbar()\nm\n</pre> m = athigeo.Map() # m.add_toolbar() m Out[3]: In\u00a0[4]: Copied! <pre>widget_width = \"250px\"\npadding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\ntoolbar_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Toolbar\",\n    icon=\"wrench\",\n    layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n)\n\nclose_button = widgets.ToggleButton(\n    value=False,\n    tooltip=\"Close the tool\",\n    icon=\"times\",\n    button_style=\"primary\",\n    layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n)\n</pre> widget_width = \"250px\" padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left  toolbar_button = widgets.ToggleButton(     value=False,     tooltip=\"Toolbar\",     icon=\"wrench\",     layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding), )  close_button = widgets.ToggleButton(     value=False,     tooltip=\"Close the tool\",     icon=\"times\",     button_style=\"primary\",     layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding), ) In\u00a0[5]: Copied! <pre>toolbar = widgets.HBox([toolbar_button])\ntoolbar\n</pre> toolbar = widgets.HBox([toolbar_button]) toolbar Out[5]: In\u00a0[6]: Copied! <pre>def toolbar_click(change):\n    if change[\"new\"]:\n        toolbar.children = [toolbar_button, close_button]\n    else:\n        toolbar.children = [toolbar_button]\n\n\ntoolbar_button.observe(toolbar_click, \"value\")\n</pre> def toolbar_click(change):     if change[\"new\"]:         toolbar.children = [toolbar_button, close_button]     else:         toolbar.children = [toolbar_button]   toolbar_button.observe(toolbar_click, \"value\") In\u00a0[7]: Copied! <pre>def close_click(change):\n    if change[\"new\"]:\n        toolbar_button.close()\n        close_button.close()\n        toolbar.close()\n\n\nclose_button.observe(close_click, \"value\")\ntoolbar\n</pre> def close_click(change):     if change[\"new\"]:         toolbar_button.close()         close_button.close()         toolbar.close()   close_button.observe(close_click, \"value\") toolbar Out[7]: In\u00a0[8]: Copied! <pre>rows = 2\ncols = 2\ngrid = widgets.GridspecLayout(\n    rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")\n)\n</pre> rows = 2 cols = 2 grid = widgets.GridspecLayout(     rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\") ) <p>icons: https://fontawesome.com/v4.7.0/icons/</p> In\u00a0[9]: Copied! <pre>icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\nfor i in range(rows):\n    for j in range(cols):\n        grid[i, j] = widgets.Button(\n            description=\"\",\n            button_style=\"primary\",\n            icon=icons[i * rows + j],\n            layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n        )\ngrid\n</pre> icons = [\"folder-open\", \"map\", \"info\", \"question\"]  for i in range(rows):     for j in range(cols):         grid[i, j] = widgets.Button(             description=\"\",             button_style=\"primary\",             icon=icons[i * rows + j],             layout=widgets.Layout(width=\"28px\", padding=\"0px\"),         ) grid Out[9]: In\u00a0[10]: Copied! <pre>toolbar = widgets.VBox([toolbar_button])\n</pre> toolbar = widgets.VBox([toolbar_button]) In\u00a0[11]: Copied! <pre>def toolbar_click(change):\n    if change[\"new\"]:\n        toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n    else:\n        toolbar.children = [toolbar_button]\n\n\ntoolbar_button.observe(toolbar_click, \"value\")\ntoolbar\n</pre> def toolbar_click(change):     if change[\"new\"]:         toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]     else:         toolbar.children = [toolbar_button]   toolbar_button.observe(toolbar_click, \"value\") toolbar Out[11]: In\u00a0[12]: Copied! <pre>toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n</pre> toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\") In\u00a0[13]: Copied! <pre>m = athigeo.Map()\nm.add(toolbar_ctrl)\nm\n</pre> m = athigeo.Map() m.add(toolbar_ctrl) m Out[13]: In\u00a0[14]: Copied! <pre>output = widgets.Output()\noutput_ctrl = WidgetControl(widget=output, position=\"bottomleft\")\nm.add(output_ctrl)\n</pre> output = widgets.Output() output_ctrl = WidgetControl(widget=output, position=\"bottomleft\") m.add(output_ctrl) Out[14]: In\u00a0[15]: Copied! <pre>def tool_click(b):\n    with output:\n        output.clear_output()\n        print(f\"You clicked the {b.icon} button\")\n</pre> def tool_click(b):     with output:         output.clear_output()         print(f\"You clicked the {b.icon} button\") In\u00a0[16]: Copied! <pre>for i in range(rows):\n    for j in range(cols):\n        tool = grid[i, j]\n        tool.on_click(tool_click)\n</pre> for i in range(rows):     for j in range(cols):         tool = grid[i, j]         tool.on_click(tool_click) <p></p>"},{"location":"examples/toolbar/#creating-a-toolbar-button","title":"Creating a toolbar button\u00b6","text":""},{"location":"examples/toolbar/#adding-toolbar-event","title":"Adding toolbar event\u00b6","text":""},{"location":"examples/toolbar/#adding-toolbar-grid","title":"Adding toolbar grid\u00b6","text":""},{"location":"examples/toolbar/#adding-toolbar-to-ipyleaflet","title":"Adding toolbar to ipyleaflet\u00b6","text":""},{"location":"examples/vector/","title":"Vector","text":"In\u00a0[\u00a0]: Copied! <pre>import os\nimport json\nimport random\nimport requests\n\nfrom ipyleaflet import Map, GeoJSON\n\n\nwith open('europe_110.geo.json', 'r') as f:\n    data = json.load(f)\n\n\nm = Map(center=(50.6252978589571, 0.34580993652344), zoom=3)\n\ngeo_json = GeoJSON(\n    data=data,\n    \n)\nm.add(geo_json)\n\nm\n</pre> import os import json import random import requests  from ipyleaflet import Map, GeoJSON   with open('europe_110.geo.json', 'r') as f:     data = json.load(f)   m = Map(center=(50.6252978589571, 0.34580993652344), zoom=3)  geo_json = GeoJSON(     data=data,      ) m.add(geo_json)  m In\u00a0[\u00a0]: Copied! <pre>import os\nimport json\nimport random\nimport requests\n\nfrom ipyleaflet import Map, GeoJSON\n\nif not os.path.exists('europe_110.geo.json'):\n    url = 'https://github.com/jupyter-widgets/ipyleaflet/raw/master/examples/europe_110.geo.json'\n    r = requests.get(url)\n    with open('europe_110.geo.json', 'w') as f:\n        f.write(r.content.decode(\"utf-8\"))\n\nwith open('europe_110.geo.json', 'r') as f:\n    data = json.load(f)\n\ndef random_color(feature):\n    return {\n        'color': 'black',\n        'fillColor': random.choice(['red', 'yellow', 'green', 'orange']),\n    }\n\nm = Map(center=(50.6252978589571, 0.34580993652344), zoom=3)\n\ngeo_json = GeoJSON(\n    data=data,\n    style={\n        'opacity': 1, 'dashArray': '9', 'fillOpacity': 0.1, 'weight': 1\n    },\n    hover_style={\n        'color': 'white', 'dashArray': '0', 'fillOpacity': 0.5\n    },\n    style_callback=random_color\n)\nm.add(geo_json)\n\nm\n</pre> import os import json import random import requests  from ipyleaflet import Map, GeoJSON  if not os.path.exists('europe_110.geo.json'):     url = 'https://github.com/jupyter-widgets/ipyleaflet/raw/master/examples/europe_110.geo.json'     r = requests.get(url)     with open('europe_110.geo.json', 'w') as f:         f.write(r.content.decode(\"utf-8\"))  with open('europe_110.geo.json', 'r') as f:     data = json.load(f)  def random_color(feature):     return {         'color': 'black',         'fillColor': random.choice(['red', 'yellow', 'green', 'orange']),     }  m = Map(center=(50.6252978589571, 0.34580993652344), zoom=3)  geo_json = GeoJSON(     data=data,     style={         'opacity': 1, 'dashArray': '9', 'fillOpacity': 0.1, 'weight': 1     },     hover_style={         'color': 'white', 'dashArray': '0', 'fillOpacity': 0.5     },     style_callback=random_color ) m.add(geo_json)  m In\u00a0[1]: Copied! <pre>import athigeo\n</pre> import athigeo In\u00a0[11]: Copied! <pre>m = athigeo.Map()\nm.add_basemap(\"OpenTopoMap\")\n# m.add_geojson(\"europe_110.geo.json\")\nm.add_shp(\".\\SOM_LivelihoodZones\\SOM_LivelihoodZones.shp\")\nm\n</pre> m = athigeo.Map() m.add_basemap(\"OpenTopoMap\") # m.add_geojson(\"europe_110.geo.json\") m.add_shp(\".\\SOM_LivelihoodZones\\SOM_LivelihoodZones.shp\") m Out[11]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre>"}]}